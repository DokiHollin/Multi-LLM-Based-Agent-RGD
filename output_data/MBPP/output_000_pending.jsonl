{"task_id": "MBPP/11", "prompt": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n", "entry_point": "remove_Occ", "test": "\ndef check(candidate):\n    assert remove_Occ(\"hello\",\"l\") == \"heo\"\n    assert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n    assert remove_Occ(\"PHP\",\"P\") == \"H\"\ncheck(remove_Occ)\n", "canonical_solution": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ", "is_passing": true, "given_tests": ["assert remove_Occ(\"hello\",\"l\") == \"heo\""], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/12", "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n", "entry_point": "sort_matrix", "test": "\ndef check(candidate):\n    assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\ncheck(sort_matrix)\n", "canonical_solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "is_passing": true, "given_tests": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/13", "prompt": "def count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    \"\"\"\n", "entry_point": "count_common", "test": "\ndef check(candidate):\n    assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\ncheck(count_common)\n", "canonical_solution": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n", "is_passing": true, "given_tests": ["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"], "is_solved": true, "implementations": "from collections import Counter\n\ndef count_common(words, top_n=4):\n    if isinstance(words, list):\n        word_counter = Counter(words)\n        first_occurrence = {}\n        for idx, word in enumerate(words):\n            if word not in first_occurrence:\n                first_occurrence[word] = idx\n    elif isinstance(words, dict):\n        word_counter = words\n        first_occurrence = {word: idx for idx, word in enumerate(words.keys())}\n    else:\n        raise ValueError(\"Input must be a dictionary or a list.\")\n    \n    if not word_counter:\n        return []\n\n    sorted_words = sorted(word_counter.items(), key=lambda x: (-x[1], first_occurrence[x[0]]))\n\n    return sorted_words[:top_n]", "test_feedback": [], "solution": "from collections import Counter\n\ndef count_common(words, top_n=4):\n    if isinstance(words, list):\n        word_counter = Counter(words)\n        first_occurrence = {}\n        for idx, word in enumerate(words):\n            if word not in first_occurrence:\n                first_occurrence[word] = idx\n    elif isinstance(words, dict):\n        word_counter = words\n        first_occurrence = {word: idx for idx, word in enumerate(words.keys())}\n    else:\n        raise ValueError(\"Input must be a dictionary or a list.\")\n    \n    if not word_counter:\n        return []\n\n    sorted_words = sorted(word_counter.items(), key=lambda x: (-x[1], first_occurrence[x[0]]))\n\n    return sorted_words[:top_n]", "generated_test": ["assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"], "debug_iter": 6, "token_nums": 619}
{"task_id": "MBPP/14", "prompt": "def find_Volume(l,b,h) : \n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n", "entry_point": "find_Volume", "test": "\ndef check(candidate):\n    assert find_Volume(10,8,6) == 240\n    assert find_Volume(3,2,2) == 6\n    assert find_Volume(1,2,1) == 1\ncheck(find_Volume)\n", "canonical_solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ", "is_passing": true, "given_tests": ["assert find_Volume(10,8,6) == 240"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/15", "prompt": "def split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    \"\"\"\n", "entry_point": "split_lowerstring", "test": "\ndef check(candidate):\n    assert split_lowerstring(\"AbCd\")==['bC','d']\n    assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\ncheck(split_lowerstring)\n", "canonical_solution": "import re\ndef split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))", "is_passing": true, "given_tests": ["assert split_lowerstring(\"AbCd\")==['bC','d']"], "is_solved": true, "implementations": "def split_lowerstring(text):\n    result = []\n    current_segment = ''\n    collecting = False\n    \n    for char in text:\n        if char.islower():\n            if collecting and current_segment:\n                result.append(current_segment)\n            current_segment = char\n            collecting = True\n        elif collecting:\n            current_segment += char\n    \n    if current_segment:\n        result.append(current_segment)\n    \n    return result", "test_feedback": [], "solution": "def split_lowerstring(text):\n    result = []\n    current_segment = ''\n    collecting = False\n    \n    for char in text:\n        if char.islower():\n            if collecting and current_segment:\n                result.append(current_segment)\n            current_segment = char\n            collecting = True\n        elif collecting:\n            current_segment += char\n    \n    if current_segment:\n        result.append(current_segment)\n    \n    return result", "generated_test": ["assert split_lowerstring(\"AbCd\")==['bC','d']"], "debug_iter": 10, "token_nums": 541}
{"task_id": "MBPP/16", "prompt": "def text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    \"\"\"\n", "entry_point": "text_lowercase_underscore", "test": "\ndef check(candidate):\n    assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n    assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n    assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\ncheck(text_lowercase_underscore)\n", "canonical_solution": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')", "is_passing": true, "given_tests": ["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')"], "is_solved": false, "implementations": "import re\n\ndef text_lowercase_underscore(text):\n    \n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return 'Found a match!' if matches else 'No match found'", "test_feedback": [], "solution": "import re\n\ndef text_lowercase_underscore(text):\n    \n    pattern = r'[a-z]+(?:_[a-z]+)*'\n    matches = re.findall(pattern, text)\n    return 'Found a match!' if matches else 'No match found'", "generated_test": ["assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')"], "debug_iter": 2, "token_nums": 626}
{"task_id": "MBPP/17", "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    \"\"\"\n", "entry_point": "square_perimeter", "test": "\ndef check(candidate):\n    assert square_perimeter(10)==40\n    assert square_perimeter(5)==20\n    assert square_perimeter(4)==16\ncheck(square_perimeter)\n", "canonical_solution": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "is_passing": true, "given_tests": ["assert square_perimeter(10)==40"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/18", "prompt": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n", "entry_point": "str_to_list", "test": "\ndef check(candidate):\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n    assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n    assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' \ncheck(str_to_list)\n", "canonical_solution": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    temp = [] \n    for x in string: \n        temp.append(x) \n    return temp \ndef lst_to_string(List): \n    return ''.join(List) \ndef get_char_count_array(string): \n    count = [0] * NO_OF_CHARS \n    for i in string: \n        count[ord(i)] += 1\n    return count \ndef remove_dirty_chars(string, second_string): \n    count = get_char_count_array(second_string) \n    ip_ind = 0\n    res_ind = 0\n    temp = '' \n    str_list = str_to_list(string) \n    while ip_ind != len(str_list): \n        temp = str_list[ip_ind] \n        if count[ord(temp)] == 0: \n            str_list[res_ind] = str_list[ip_ind] \n            res_ind += 1\n        ip_ind+=1\n    return lst_to_string(str_list[0:res_ind]) ", "is_passing": true, "given_tests": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/19", "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n", "entry_point": "test_duplicate", "test": "\ndef check(candidate):\n    assert test_duplicate(([1,2,3,4,5]))==False\n    assert test_duplicate(([1,2,3,4, 4]))==True\n    assert test_duplicate([1,1,2,2,3,3,4,4,5])==True\ncheck(test_duplicate)\n", "canonical_solution": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "is_passing": true, "given_tests": ["assert test_duplicate(([1,2,3,4,5]))==False"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/20", "prompt": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n", "entry_point": "is_woodall", "test": "\ndef check(candidate):\n    assert is_woodall(383) == True\n    assert is_woodall(254) == False\n    assert is_woodall(200) == False\ncheck(is_woodall)\n", "canonical_solution": "def is_woodall(x): \n    if (x % 2 == 0): \n        return False\n    if (x == 1): \n        return True\n    x = x + 1 \n    p = 0\n    while (x % 2 == 0): \n        x = x/2\n        p = p + 1\n        if (p == x): \n            return True\n    return False", "is_passing": true, "given_tests": ["assert is_woodall(383) == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/21", "prompt": "def multiples_of_num(m,n): \n    \"\"\"\n    Write a function to find m number of multiples of n.\n    \"\"\"\n", "entry_point": "multiples_of_num", "test": "\ndef check(candidate):\n    assert multiples_of_num(4,3)== [3,6,9,12]\n    assert multiples_of_num(2,5)== [5,10]\n    assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]\ncheck(multiples_of_num)\n", "canonical_solution": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)", "is_passing": true, "given_tests": ["assert multiples_of_num(4,3)== [3,6,9,12]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/22", "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n", "entry_point": "find_first_duplicate", "test": "\ndef check(candidate):\n    assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n    assert find_first_duplicate([1, 2, 3, 4])==-1\n    assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1\ncheck(find_first_duplicate)\n", "canonical_solution": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate", "is_passing": true, "given_tests": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4"], "is_solved": false, "implementations": "```python\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None  # or return -1 if you prefer\n```\n", "test_feedback": [], "solution": "```python\ndef find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None  # or return -1 if you prefer\n```\n", "generated_test": ["assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4"], "debug_iter": 1, "token_nums": 713}
{"task_id": "MBPP/23", "prompt": "def maximum_Sum(list1): \n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    \"\"\"\n", "entry_point": "maximum_Sum", "test": "\ndef check(candidate):\n    assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\ncheck(maximum_Sum)\n", "canonical_solution": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ", "is_passing": true, "given_tests": ["assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/24", "prompt": "def binary_to_decimal(binary): \n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    \"\"\"\n", "entry_point": "binary_to_decimal", "test": "\ndef check(candidate):\n    assert binary_to_decimal(100) == 4\n    assert binary_to_decimal(1011) == 11\n    assert binary_to_decimal(1101101) == 109\ncheck(binary_to_decimal)\n", "canonical_solution": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)", "is_passing": true, "given_tests": ["assert binary_to_decimal(100) == 4"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/25", "prompt": "def find_Product(arr,n): \n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    \"\"\"\n", "entry_point": "find_Product", "test": "\ndef check(candidate):\n    assert find_Product([1,1,2,3],4) == 6\n    assert find_Product([1,2,3,1,1],5) == 6\n    assert find_Product([1,1,4,5,6],5) == 120\ncheck(find_Product)\n", "canonical_solution": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ", "is_passing": true, "given_tests": ["assert find_Product([1,1,2,3],4) == 6"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/26", "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    \"\"\"\n", "entry_point": "check_k_elements", "test": "\ndef check(candidate):\n    assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\n    assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False\ncheck(check_k_elements)\n", "canonical_solution": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ", "is_passing": true, "given_tests": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True"], "is_solved": false, "implementations": "def check_k_elements(test_list, K):\n    \n    for tup in test_list:\n        if len(tup) == K:\n            return True\n    return False", "test_feedback": [], "solution": "def check_k_elements(test_list, K):\n    \n    for tup in test_list:\n        if len(tup) == K:\n            return True\n    return False", "generated_test": ["assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True"], "debug_iter": 2, "token_nums": 594}
{"task_id": "MBPP/27", "prompt": "def remove(list): \n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    \"\"\"\n", "entry_point": "remove", "test": "\ndef check(candidate):\n    assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\ncheck(remove)\n", "canonical_solution": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list", "is_passing": true, "given_tests": ["assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/28", "prompt": "def binomial_Coeff(n,k): \n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    \"\"\"\n", "entry_point": "binomial_Coeff", "test": "\ndef check(candidate):\n    assert binomial_Coeff(5,2) == 10\n    assert binomial_Coeff(4,3) == 4\n    assert binomial_Coeff(3,2) == 3\ncheck(binomial_Coeff)\n", "canonical_solution": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "is_passing": true, "given_tests": ["assert binomial_Coeff(5,2) == 10"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/29", "prompt": "def get_Odd_Occurrence(arr,arr_size):   \n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    \"\"\"\n", "entry_point": "get_Odd_Occurrence", "test": "\ndef check(candidate):\n    assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n    assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\n    assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5\ncheck(get_Odd_Occurrence)\n", "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "is_passing": true, "given_tests": ["assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/30", "prompt": "def check_Equality(s): \n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    \"\"\"\n", "entry_point": "check_Equality", "test": "\ndef check(candidate):\n    assert count_Substring_With_Equal_Ends(\"abc\") == 3\n    assert count_Substring_With_Equal_Ends(\"abcda\") == 6\n    assert count_Substring_With_Equal_Ends(\"ab\") == 2\ncheck(check_Equality)\n", "canonical_solution": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ", "is_passing": true, "given_tests": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3"], "is_solved": true, "implementations": "def count_Substring_With_Equal_Ends(s): \n    \n    n = len(s)\n    count = 0\n\n    for i in range(n):\n\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "test_feedback": [], "solution": "def count_Substring_With_Equal_Ends(s): \n    \n    n = len(s)\n    count = 0\n\n    for i in range(n):\n\n        for j in range(i, n):\n            if s[i] == s[j]:\n                count += 1\n    \n    return count", "generated_test": ["assert count_Substring_With_Equal_Ends(\"abc\") == 3"], "debug_iter": 2, "token_nums": 582}
{"task_id": "MBPP/31", "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    \"\"\"\n", "entry_point": "func", "test": "\ndef check(candidate):\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n    assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\ncheck(func)\n", "canonical_solution": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "is_passing": false, "given_tests": ["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]"], "is_solved": false, "implementations": "import heapq\nfrom collections import defaultdict\n\ndef func(nums, k):\n    frequency = defaultdict(int)\n\n    for sublist in nums:\n        for num in sublist:\n            frequency[num] += 1\n\n    min_heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    top_k = sorted(min_heap, key=lambda x: (-x[0], x[1]))\n\n    return [num for freq, num in top_k]", "test_feedback": ["assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1] # Real Execution Output: [1, 7, 8]"], "solution": "import heapq\nfrom collections import defaultdict\n\ndef func(nums, k):\n    frequency = defaultdict(int)\n\n    for sublist in nums:\n        for num in sublist:\n            frequency[num] += 1\n\n    min_heap = []\n    for num, freq in frequency.items():\n        heapq.heappush(min_heap, (freq, num))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    top_k = sorted(min_heap, key=lambda x: (-x[0], x[1]))\n\n    return [num for freq, num in top_k]", "generated_test": [], "debug_iter": 10, "token_nums": 674}
{"task_id": "MBPP/32", "prompt": "def max_Prime_Factors (n): \n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    \"\"\"\n", "entry_point": "max_Prime_Factors", "test": "\ndef check(candidate):\n    assert max_Prime_Factors(15) == 5\n    assert max_Prime_Factors(6) == 3\n    assert max_Prime_Factors(2) == 2\ncheck(max_Prime_Factors)\n", "canonical_solution": "import math \ndef max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)", "is_passing": true, "given_tests": ["assert max_Prime_Factors(15) == 5"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/33", "prompt": "def decimal_To_Binary(N): \n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    \"\"\"\n", "entry_point": "decimal_To_Binary", "test": "\ndef check(candidate):\n    assert decimal_To_Binary(10) == 1010\n    assert decimal_To_Binary(1) == 1\n    assert decimal_To_Binary(20) == 10100\ncheck(decimal_To_Binary)\n", "canonical_solution": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ", "is_passing": true, "given_tests": ["assert decimal_To_Binary(10) == 1010"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/34", "prompt": "def find_missing(ar,N): \n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    \"\"\"\n", "entry_point": "find_missing", "test": "\ndef check(candidate):\n    assert find_missing([1,2,3,5],4) == 4\n    assert find_missing([1,3,4,5],4) == 2\n    assert find_missing([1,2,3,5,6,7],5) == 4\ncheck(find_missing)\n", "canonical_solution": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ", "is_passing": true, "given_tests": ["assert find_missing([1,2,3,5],4) == 4"], "is_solved": false, "implementations": "def find_missing(ar, N):\n\n    expected_sum = ((N + 1) * (N + 2)) // 2\n    actual_sum = sum(ar)\n    missing_number = expected_sum - actual_sum\n    return missing_number", "test_feedback": [], "solution": "def find_missing(ar, N):\n\n    expected_sum = ((N + 1) * (N + 2)) // 2\n    actual_sum = sum(ar)\n    missing_number = expected_sum - actual_sum\n    return missing_number", "generated_test": ["assert find_missing([1,2,3,5],4) == 4"], "debug_iter": 4, "token_nums": 645}
{"task_id": "MBPP/35", "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    \"\"\"\n", "entry_point": "find_rect_num", "test": "\ndef check(candidate):\n    assert find_rect_num(4) == 20\n    assert find_rect_num(5) == 30\n    assert find_rect_num(6) == 42\ncheck(find_rect_num)\n", "canonical_solution": "def find_rect_num(n):\n  return n*(n + 1) ", "is_passing": true, "given_tests": ["assert find_rect_num(4) == 20"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/36", "prompt": "def find_Nth_Digit(p,q,N) :  \n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n", "entry_point": "find_Nth_Digit", "test": "\ndef check(candidate):\n    assert find_Nth_Digit(1,2,1) == 5\n    assert find_Nth_Digit(3,5,1) == 6\n    assert find_Nth_Digit(5,6,5) == 3\ncheck(find_Nth_Digit)\n", "canonical_solution": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ", "is_passing": true, "given_tests": ["assert find_Nth_Digit(1,2,1) == 5"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/37", "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    \"\"\"\n", "entry_point": "sort_mixed_list", "test": "\ndef check(candidate):\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\ncheck(sort_mixed_list)\n", "canonical_solution": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "is_passing": true, "given_tests": ["assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/38", "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    \"\"\"\n", "entry_point": "div_even_odd", "test": "\ndef check(candidate):\n    assert div_even_odd([1,3,5,7,4,1,6,8])==4\n    assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n    assert div_even_odd([1,5,7,9,10])==10\ncheck(div_even_odd)\n", "canonical_solution": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)", "is_passing": true, "given_tests": ["assert div_even_odd([1,3,5,7,4,1,6,8])==4"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/39", "prompt": "def rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    \"\"\"\n", "entry_point": "rearange_string", "test": "\ndef check(candidate):\n    assert rearange_string(\"aab\")==('aba')\n    assert rearange_string(\"aabb\")==('abab')\n    assert rearange_string(\"abccdd\")==('cdabcd')\ncheck(rearange_string)\n", "canonical_solution": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "is_passing": true, "given_tests": ["assert rearange_string(\"aab\")==('aba')"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/40", "prompt": "def freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    \"\"\"\n", "entry_point": "freq_element", "test": "\ndef check(candidate):\n    assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n    assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n    assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\ncheck(freq_element)\n", "canonical_solution": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result", "is_passing": true, "given_tests": ["assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/41", "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    \"\"\"\n", "entry_point": "filter_evennumbers", "test": "\ndef check(candidate):\n    assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\n    assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]\ncheck(filter_evennumbers)\n", "canonical_solution": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums", "is_passing": true, "given_tests": ["assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/42", "prompt": "def find_Sum(arr,n): \n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    \"\"\"\n", "entry_point": "find_Sum", "test": "\ndef check(candidate):\n    assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n    assert find_Sum([1,2,3,1,1],5) == 3\n    assert find_Sum([1,1,2],3) == 2\ncheck(find_Sum)\n", "canonical_solution": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])", "is_passing": true, "given_tests": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3"], "is_solved": true, "implementations": "from collections import Counter\n\ndef find_Sum(arr, n):\n    element_count = Counter(arr)\n    sum_repeated = 0\n\n    for element, count in element_count.items():\n        if count > 1:\n            sum_repeated += element * count\n    \n    return sum_repeated", "test_feedback": [], "solution": "from collections import Counter\n\ndef find_Sum(arr, n):\n    element_count = Counter(arr)\n    sum_repeated = 0\n\n    for element, count in element_count.items():\n        if count > 1:\n            sum_repeated += element * count\n    \n    return sum_repeated", "generated_test": ["assert find_Sum([1,2,3,1,1,4,5,6],8) == 3"], "debug_iter": 5, "token_nums": 581}
{"task_id": "MBPP/43", "prompt": "def text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    \"\"\"\n", "entry_point": "text_match", "test": "\ndef check(candidate):\n    assert text_match(\"aab_cbbbc\") == 'Found a match!'\n    assert text_match(\"aab_Abbbc\") == 'Not matched!'\n    assert text_match(\"Aaab_abbbc\") == 'Not matched!'\ncheck(text_match)\n", "canonical_solution": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')", "is_passing": true, "given_tests": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'"], "is_solved": false, "implementations": "import re\n\ndef text_match(text):\n    \n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'No match found'", "test_feedback": [], "solution": "import re\n\ndef text_match(text):\n    \n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return 'No match found'", "generated_test": ["assert text_match(\"aab_cbbbc\") == 'Found a match!'"], "debug_iter": 2, "token_nums": 617}
{"task_id": "MBPP/44", "prompt": "def text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    \"\"\"\n", "entry_point": "text_match_string", "test": "\ndef check(candidate):\n    assert text_match_string(\" python\")==('Not matched!')\n    assert text_match_string(\"python\")==('Found a match!')\n    assert text_match_string(\"  lang\")==('Not matched!')\ncheck(text_match_string)\n", "canonical_solution": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'", "is_passing": true, "given_tests": ["assert text_match_string(\" python\")==('Not matched!')"], "is_solved": false, "implementations": "def text_match_string(text):\n    word = \"python\"\n    if text.startswith(word):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\nprint(text_match_string(\"Hello world\"))  # Not matched!\nprint(text_match_string(\"  Hello world\"))  # Not matched!\nprint(text_match_string(\"hello world\"))  # Not matched!\nprint(text_match_string(\"\"))  # Not matched!\nprint(text_match_string(\" python\"))  # Not matched!", "test_feedback": [], "solution": "def text_match_string(text):\n    word = \"python\"\n    if text.startswith(word):\n        return 'Matched!'\n    else:\n        return 'Not matched!'\n\nprint(text_match_string(\"Hello world\"))  # Not matched!\nprint(text_match_string(\"  Hello world\"))  # Not matched!\nprint(text_match_string(\"hello world\"))  # Not matched!\nprint(text_match_string(\"\"))  # Not matched!\nprint(text_match_string(\" python\"))  # Not matched!", "generated_test": ["assert text_match_string(\" python\")==('Not matched!')"], "debug_iter": 3, "token_nums": 575}
{"task_id": "MBPP/45", "prompt": "def find_gcd(x, y): \n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    \"\"\"\n", "entry_point": "find_gcd", "test": "\ndef check(candidate):\n    assert get_gcd([2, 4, 6, 8, 16]) == 2\n    assert get_gcd([1, 2, 3]) == 1\n    assert get_gcd([2, 4, 6, 8]) == 2 \ncheck(find_gcd)\n", "canonical_solution": "def find_gcd(x, y): \n    while(y): \n        x, y = y, x % y \n    return x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "is_passing": true, "given_tests": ["assert get_gcd([2, 4, 6, 8, 16]) == 2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/46", "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    \"\"\"\n", "entry_point": "test_distinct", "test": "\ndef check(candidate):\n    assert test_distinct([1,5,7,9]) == True\n    assert test_distinct([2,4,5,5,7,9]) == False\n    assert test_distinct([1,2,3]) == True\ncheck(test_distinct)\n", "canonical_solution": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "is_passing": true, "given_tests": ["assert test_distinct([1,5,7,9]) == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/47", "prompt": "def compute_Last_Digit(A,B): \n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    \"\"\"\n", "entry_point": "compute_Last_Digit", "test": "\ndef check(candidate):\n    assert compute_Last_Digit(2,4) == 2\n    assert compute_Last_Digit(6,8) == 6\n    assert compute_Last_Digit(1,2) == 2\ncheck(compute_Last_Digit)\n", "canonical_solution": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10", "is_passing": true, "given_tests": ["assert compute_Last_Digit(2,4) == 2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/48", "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    \"\"\"\n", "entry_point": "odd_bit_set_number", "test": "\ndef check(candidate):\n    assert odd_bit_set_number(10) == 15\n    assert odd_bit_set_number(20) == 21\n    assert odd_bit_set_number(30) == 31\ncheck(odd_bit_set_number)\n", "canonical_solution": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)", "is_passing": false, "given_tests": ["assert odd_bit_set_number(10) == 15"], "is_solved": false, "implementations": "def odd_bit_set_number(n):\n    mask = 0x55555555  # Binary: 01010101010101010101010101010101\n    return n | mask", "test_feedback": ["assert odd_bit_set_number(10) == 15 # Real Execution Output: 2863311530"], "solution": "def odd_bit_set_number(n):\n    mask = 0x55555555  # Binary: 01010101010101010101010101010101\n    return n | mask", "generated_test": [], "debug_iter": 10, "token_nums": 637}
{"task_id": "MBPP/49", "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    \"\"\"\n", "entry_point": "specified_element", "test": "\ndef check(candidate):\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n    assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\ncheck(specified_element)\n", "canonical_solution": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ", "is_passing": true, "given_tests": ["assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/50", "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    \"\"\"\n", "entry_point": "min_length_list", "test": "\ndef check(candidate):\n    assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n    assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n    assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\ncheck(min_length_list)\n", "canonical_solution": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)", "is_passing": true, "given_tests": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])"], "is_solved": true, "implementations": "def min_length_list(input_list):\n    \n    if not input_list:\n        return (0, [])\n    shortest_list = min(input_list, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)", "test_feedback": [], "solution": "def min_length_list(input_list):\n    \n    if not input_list:\n        return (0, [])\n    shortest_list = min(input_list, key=lambda x: len(x))\n    return (len(shortest_list), shortest_list)", "generated_test": ["assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])"], "debug_iter": 2, "token_nums": 633}
{"task_id": "MBPP/51", "prompt": "def check_equilateral(x,y,z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    \"\"\"\n", "entry_point": "check_equilateral", "test": "\ndef check(candidate):\n    assert check_equilateral(6,8,12)==False \n    assert check_equilateral(6,6,12)==False\n    assert check_equilateral(6,6,6)==True\ncheck(check_equilateral)\n", "canonical_solution": "def check_equilateral(x,y,z):\n  if x == y == z:\n       return True\n  else:\n     return False", "is_passing": true, "given_tests": ["assert check_equilateral(6,8,12)==False "], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/52", "prompt": "def parallelogram_area(b,h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    \"\"\"\n", "entry_point": "parallelogram_area", "test": "\ndef check(candidate):\n    assert parallelogram_area(10,20)==200\n    assert parallelogram_area(15,20)==300\n    assert parallelogram_area(8,9)==72\ncheck(parallelogram_area)\n", "canonical_solution": "def parallelogram_area(b,h):\n  area=b*h\n  return area", "is_passing": true, "given_tests": ["assert parallelogram_area(10,20)==200"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/53", "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    \"\"\"\n", "entry_point": "check_Equality", "test": "\ndef check(candidate):\n    assert check_Equality(\"abcda\") == \"Equal\"\n    assert check_Equality(\"ab\") == \"Not Equal\"\n    assert check_Equality(\"mad\") == \"Not Equal\"\ncheck(check_Equality)\n", "canonical_solution": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "is_passing": true, "given_tests": ["assert check_Equality(\"abcda\") == \"Equal\""], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/54", "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    \"\"\"\n", "entry_point": "counting_sort", "test": "\ndef check(candidate):\n    assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\ncheck(counting_sort)\n", "canonical_solution": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list", "is_passing": true, "given_tests": ["assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/55", "prompt": "def tn_gp(a,n,r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    \"\"\"\n", "entry_point": "tn_gp", "test": "\ndef check(candidate):\n    assert tn_gp(1,5,2)==16\n    assert tn_gp(1,5,4)==256\n    assert tn_gp(2,6,3)==486\ncheck(tn_gp)\n", "canonical_solution": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn", "is_passing": true, "given_tests": ["assert tn_gp(1,5,2)==16"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/56", "prompt": "def rev(num):    \n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n", "entry_point": "rev", "test": "\ndef check(candidate):\n    assert check(70) == False\n    assert check(23) == False\n    assert check(73) == True\ncheck(rev)\n", "canonical_solution": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "is_passing": false, "given_tests": ["assert check(70) == False"], "is_solved": false, "implementations": "def rev(num):\n    num_str = str(num)\n    if num < 0:\n        reversed_num = -int(num_str[:0:-1])\n    else:\n        reversed_num = int(num_str[::-1])\n    \n    twice_reversed = 2 * reversed_num\n    return num == twice_reversed - 1", "test_feedback": ["assert check(70) == False # Real Execution Output: None"], "solution": "def rev(num):\n    num_str = str(num)\n    if num < 0:\n        reversed_num = -int(num_str[:0:-1])\n    else:\n        reversed_num = int(num_str[::-1])\n    \n    twice_reversed = 2 * reversed_num\n    return num == twice_reversed - 1", "generated_test": [], "debug_iter": 10, "token_nums": 591}
{"task_id": "MBPP/57", "prompt": "def find_Max_Num(arr,n) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    \"\"\"\n", "entry_point": "find_Max_Num", "test": "\ndef check(candidate):\n    assert find_Max_Num([1,2,3],3) == 321\n    assert find_Max_Num([4,5,6,1],4) == 6541\n    assert find_Max_Num([1,2,3,9],4) == 9321\ncheck(find_Max_Num)\n", "canonical_solution": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ", "is_passing": true, "given_tests": ["assert find_Max_Num([1,2,3],3) == 321"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/58", "prompt": "def opposite_Signs(x,y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n", "entry_point": "opposite_Signs", "test": "\ndef check(candidate):\n    assert opposite_Signs(1,-2) == True\n    assert opposite_Signs(3,2) == False\n    assert opposite_Signs(-10,-10) == False\ncheck(opposite_Signs)\n", "canonical_solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "is_passing": true, "given_tests": ["assert opposite_Signs(1,-2) == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/59", "prompt": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n", "entry_point": "is_octagonal", "test": "\ndef check(candidate):\n    assert is_octagonal(5) == 65\n    assert is_octagonal(10) == 280\n    assert is_octagonal(15) == 645\ncheck(is_octagonal)\n", "canonical_solution": "def is_octagonal(n): \n    return 3 * n * n - 2 * n ", "is_passing": true, "given_tests": ["assert is_octagonal(5) == 65"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/60", "prompt": "def max_len_sub( arr, n): \n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    \"\"\"\n", "entry_point": "max_len_sub", "test": "\ndef check(candidate):\n    assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert max_len_sub([9, 11, 13, 15, 18], 5) == 1\ncheck(max_len_sub)\n", "canonical_solution": "def max_len_sub( arr, n): \n    mls=[] \n    max = 0\n    for i in range(n): \n        mls.append(1) \n    for i in range(n): \n        for j in range(i): \n            if (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n                mls[i] = mls[j] + 1\n    for i in range(n): \n        if (max < mls[i]): \n            max = mls[i] \n    return max", "is_passing": false, "given_tests": ["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5"], "is_solved": false, "implementations": "def max_len_sub(arr, n):\n    if n <= 1:\n        return n\n\n    diff_map = [{} for _ in range(n)]\n    max_length = 1\n\n    for j in range(n):\n        for i in range(j):\n            diff = arr[j] - arr[i]\n            if diff in diff_map[i]:\n                diff_map[j][diff] = diff_map[i][diff] + 1\n            else:\n                diff_map[j][diff] = 2  # Start a new subsequence with length 2\n\n            max_length = max(max_length, diff_map[j][diff])\n\n    return max_length\n\narr = [1, 7, 10, 15, 27, 29]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output should be the length of the longest subsequence", "test_feedback": ["assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5 # Real Execution Output: 4"], "solution": "def max_len_sub(arr, n):\n    if n <= 1:\n        return n\n\n    diff_map = [{} for _ in range(n)]\n    max_length = 1\n\n    for j in range(n):\n        for i in range(j):\n            diff = arr[j] - arr[i]\n            if diff in diff_map[i]:\n                diff_map[j][diff] = diff_map[i][diff] + 1\n            else:\n                diff_map[j][diff] = 2  # Start a new subsequence with length 2\n\n            max_length = max(max_length, diff_map[j][diff])\n\n    return max_length\n\narr = [1, 7, 10, 15, 27, 29]\nn = len(arr)\nprint(max_len_sub(arr, n))  # Output should be the length of the longest subsequence", "generated_test": [], "debug_iter": 10, "token_nums": 671}
{"task_id": "MBPP/61", "prompt": "def count_Substrings(s,n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    \"\"\"\n", "entry_point": "count_Substrings", "test": "\ndef check(candidate):\n    assert count_Substrings('112112',6) == 6\n    assert count_Substrings('111',3) == 6\n    assert count_Substrings('1101112',7) == 12\ncheck(count_Substrings)\n", "canonical_solution": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count", "is_passing": true, "given_tests": ["assert count_Substrings('112112',6) == 6"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/62", "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n", "entry_point": "smallest_num", "test": "\ndef check(candidate):\n    assert smallest_num([10, 20, 1, 45, 99]) == 1\n    assert smallest_num([1, 2, 3]) == 1\n    assert smallest_num([45, 46, 50, 60]) == 45\ncheck(smallest_num)\n", "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n", "is_passing": true, "given_tests": ["assert smallest_num([10, 20, 1, 45, 99]) == 1"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/63", "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n", "entry_point": "max_difference", "test": "\ndef check(candidate):\n    assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\ncheck(max_difference)\n", "canonical_solution": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "is_passing": true, "given_tests": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/64", "prompt": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    \"\"\"\n", "entry_point": "subject_marks", "test": "\ndef check(candidate):\n    assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n    assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\ncheck(subject_marks)\n", "canonical_solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "is_passing": true, "given_tests": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/65", "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    \"\"\"\n", "entry_point": "recursive_list_sum", "test": "\ndef check(candidate):\n    assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n    assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n    assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\ncheck(recursive_list_sum)\n", "canonical_solution": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total", "is_passing": true, "given_tests": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/66", "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    \"\"\"\n", "entry_point": "pos_count", "test": "\ndef check(candidate):\n    assert pos_count([1,-2,3,-4]) == 2\n    assert pos_count([3,4,5,-1]) == 3\n    assert pos_count([1,2,3,4]) == 4\ncheck(pos_count)\n", "canonical_solution": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ", "is_passing": true, "given_tests": ["assert pos_count([1,-2,3,-4]) == 2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/67", "prompt": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    \"\"\"\n", "entry_point": "bell_number", "test": "\ndef check(candidate):\n    assert bell_number(2)==2\n    assert bell_number(10)==115975\n    assert bell_number(56)==6775685320645824322581483068371419745979053216268760300\ncheck(bell_number)\n", "canonical_solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ", "is_passing": true, "given_tests": ["assert bell_number(2)==2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/68", "prompt": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n", "entry_point": "is_Monotonic", "test": "\ndef check(candidate):\n    assert is_Monotonic([6, 5, 4, 4]) == True\n    assert is_Monotonic([1, 2, 2, 3]) == True\n    assert is_Monotonic([1, 3, 2]) == False\ncheck(is_Monotonic)\n", "canonical_solution": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "is_passing": true, "given_tests": ["assert is_Monotonic([6, 5, 4, 4]) == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/69", "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n", "entry_point": "is_sublist", "test": "\ndef check(candidate):\n    assert is_sublist([2,4,3,5,7],[3,7])==False\n    assert is_sublist([2,4,3,5,7],[4,3])==True\n    assert is_sublist([2,4,3,5,7],[1,6])==False\ncheck(is_sublist)\n", "canonical_solution": "def is_sublist(l, s):\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1                \n                if n == len(s):\n                    sub_set = True\n    return sub_set", "is_passing": true, "given_tests": ["assert is_sublist([2,4,3,5,7],[3,7])==False"], "is_solved": true, "implementations": "```python\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Edge case: An empty sublist is always a sublist\n    if not s:\n        return True\n    \n    # Edge case: If the main list is empty but the sublist is not, return False\n    if not l:\n        return False\n    \n    # Iterate over the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the slice of l from i to i+len(s) matches s\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match is found, return False\n    return False\n\n# Example usage:\n# print(is_sublist([1, 2, 3, 4], [2, 3]))  # Should return True\n# print(is_sublist([1, 2, 3, 4], [3, 5]))  # Should return False\n# print(is_sublist([], []))                # Should return True\n# print(is_sublist([1, 2, 3], []))         # Should return True\n# print(is_sublist([], [1, 2]))            # Should return False\n```\n", "test_feedback": [], "solution": "```python\ndef is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Edge case: An empty sublist is always a sublist\n    if not s:\n        return True\n    \n    # Edge case: If the main list is empty but the sublist is not, return False\n    if not l:\n        return False\n    \n    # Iterate over the main list\n    for i in range(len(l) - len(s) + 1):\n        # Check if the slice of l from i to i+len(s) matches s\n        if l[i:i+len(s)] == s:\n            return True\n    \n    # If no match is found, return False\n    return False\n\n# Example usage:\n# print(is_sublist([1, 2, 3, 4], [2, 3]))  # Should return True\n# print(is_sublist([1, 2, 3, 4], [3, 5]))  # Should return False\n# print(is_sublist([], []))                # Should return True\n# print(is_sublist([1, 2, 3], []))         # Should return True\n# print(is_sublist([], [1, 2]))            # Should return False\n```\n", "generated_test": ["assert is_sublist([2,4,3,5,7],[3,7])==False"], "debug_iter": 1, "token_nums": 685}
{"task_id": "MBPP/70", "prompt": "def find_equal_tuple(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n", "entry_point": "find_equal_tuple", "test": "\ndef check(candidate):\n    assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\ncheck(find_equal_tuple)\n", "canonical_solution": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")", "is_passing": true, "given_tests": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"], "is_solved": false, "implementations": "def get_equal(Input, k):\n    if len(Input) <= 1:\n        return 'All tuples have same length'\n\n    first_length = len(Input[0])\n\n    for tup in Input:\n        if len(tup) != first_length:\n            return 'Tuples have different lengths'\n    \n    return 'All tuples have same length'", "test_feedback": [], "solution": "def get_equal(Input, k):\n    if len(Input) <= 1:\n        return 'All tuples have same length'\n\n    first_length = len(Input[0])\n\n    for tup in Input:\n        if len(tup) != first_length:\n            return 'Tuples have different lengths'\n    \n    return 'All tuples have same length'", "generated_test": ["assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"], "debug_iter": 5, "token_nums": 512}
{"task_id": "MBPP/71", "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n", "entry_point": "comb_sort", "test": "\ndef check(candidate):\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\ncheck(comb_sort)\n", "canonical_solution": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums", "is_passing": true, "given_tests": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], "is_solved": true, "implementations": "def comb_sort(nums):\n    \n    def get_next_gap(gap):\n\n        gap = int(gap / 1.3)\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\nnums = [64, 34, 25, 12, 22, 11, 90]\nsorted_nums = comb_sort(nums)\nprint(\"Sorted array:\", sorted_nums)", "test_feedback": [], "solution": "def comb_sort(nums):\n    \n    def get_next_gap(gap):\n\n        gap = int(gap / 1.3)\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n\nnums = [64, 34, 25, 12, 22, 11, 90]\nsorted_nums = comb_sort(nums)\nprint(\"Sorted array:\", sorted_nums)", "generated_test": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], "debug_iter": 2, "token_nums": 674}
{"task_id": "MBPP/72", "prompt": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    \"\"\"\n", "entry_point": "dif_Square", "test": "\ndef check(candidate):\n    assert dif_Square(5) == True\n    assert dif_Square(10) == False\n    assert dif_Square(15) == True\ncheck(dif_Square)\n", "canonical_solution": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "is_passing": true, "given_tests": ["assert dif_Square(5) == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/73", "prompt": "def multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    \"\"\"\n", "entry_point": "multiple_split", "test": "\ndef check(candidate):\n    assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\ncheck(multiple_split)\n", "canonical_solution": "import re\ndef multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))", "is_passing": true, "given_tests": ["assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/74", "prompt": "def is_samepatterns(colors, patterns):    \n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n", "entry_point": "is_samepatterns", "test": "\ndef check(candidate):\n    assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n    assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \ncheck(is_samepatterns)\n", "canonical_solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True", "is_passing": true, "given_tests": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True "], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/75", "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n", "entry_point": "find_tuples", "test": "\ndef check(candidate):\n    assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n    assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n    assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\ncheck(find_tuples)\n", "canonical_solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ", "is_passing": true, "given_tests": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/76", "prompt": "def count_Squares(m,n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    \"\"\"\n", "entry_point": "count_Squares", "test": "\ndef check(candidate):\n    assert count_Squares(4,3) == 20\n    assert count_Squares(2,2) == 5\n    assert count_Squares(1,1) == 1\ncheck(count_Squares)\n", "canonical_solution": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "is_passing": true, "given_tests": ["assert count_Squares(4,3) == 20"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/77", "prompt": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    \"\"\"\n", "entry_point": "is_Diff", "test": "\ndef check(candidate):\n    assert is_Diff (12345) == False\n    assert is_Diff(1212112) == True\n    assert is_Diff(1212) == False\ncheck(is_Diff)\n", "canonical_solution": "def is_Diff(n): \n    return (n % 11 == 0) ", "is_passing": true, "given_tests": ["assert is_Diff (12345) == False"], "is_solved": false, "implementations": "def is_Diff(n): \n    \n    even_sum = 0\n    odd_sum = 0\n\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n\n    return even_sum == odd_sum", "test_feedback": [], "solution": "def is_Diff(n): \n    \n    even_sum = 0\n    odd_sum = 0\n\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n\n    return even_sum == odd_sum", "generated_test": ["assert is_Diff (12345) == False"], "debug_iter": 2, "token_nums": 605}
{"task_id": "MBPP/78", "prompt": "def count_With_Odd_SetBits(n): \n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    \"\"\"\n", "entry_point": "count_With_Odd_SetBits", "test": "\ndef check(candidate):\n    assert count_With_Odd_SetBits(5) == 3\n    assert count_With_Odd_SetBits(10) == 5\n    assert count_With_Odd_SetBits(15) == 8\ncheck(count_With_Odd_SetBits)\n", "canonical_solution": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ", "is_passing": true, "given_tests": ["assert count_With_Odd_SetBits(5) == 3"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/79", "prompt": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n", "entry_point": "word_len", "test": "\ndef check(candidate):\n    assert word_len(\"Hadoop\") == False\n    assert word_len(\"great\") == True\n    assert word_len(\"structure\") == True\ncheck(word_len)\n", "canonical_solution": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "is_passing": true, "given_tests": ["assert word_len(\"Hadoop\") == False"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/80", "prompt": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n", "entry_point": "tetrahedral_number", "test": "\ndef check(candidate):\n    assert tetrahedral_number(5) == 35.0\n    assert tetrahedral_number(6) == 56.0\n    assert tetrahedral_number(7) == 84.0\ncheck(tetrahedral_number)\n", "canonical_solution": "def tetrahedral_number(n): \n    return (n * (n + 1) * (n + 2)) / 6", "is_passing": true, "given_tests": ["assert tetrahedral_number(5) == 35.0"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/81", "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    \"\"\"\n", "entry_point": "zip_tuples", "test": "\ndef check(candidate):\n    assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\ncheck(zip_tuples)\n", "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ", "is_passing": true, "given_tests": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]"], "is_solved": true, "implementations": "def zip_tuples(test_tup1, test_tup2):\n    \n    from itertools import cycle, islice\n\n    max_length = max(len(test_tup1), len(test_tup2))\n\n    cycled_tup1 = islice(cycle(test_tup1), max_length)\n    cycled_tup2 = islice(cycle(test_tup2), max_length)\n\n    return list(zip(cycled_tup1, cycled_tup2))", "test_feedback": [], "solution": "def zip_tuples(test_tup1, test_tup2):\n    \n    from itertools import cycle, islice\n\n    max_length = max(len(test_tup1), len(test_tup2))\n\n    cycled_tup1 = islice(cycle(test_tup1), max_length)\n    cycled_tup2 = islice(cycle(test_tup2), max_length)\n\n    return list(zip(cycled_tup1, cycled_tup2))", "generated_test": ["assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]"], "debug_iter": 3, "token_nums": 531}
{"task_id": "MBPP/82", "prompt": "def volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n", "entry_point": "volume_sphere", "test": "\ndef check(candidate):\n    assert volume_sphere(10)==4188.790204786391\n    assert volume_sphere(25)==65449.84694978735\n    assert volume_sphere(20)==33510.32163829113\ncheck(volume_sphere)\n", "canonical_solution": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume", "is_passing": true, "given_tests": ["assert volume_sphere(10)==4188.790204786391"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/83", "prompt": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    \"\"\"\n", "entry_point": "get_Char", "test": "\ndef check(candidate):\n    assert get_Char(\"abc\") == \"f\"\n    assert get_Char(\"gfg\") == \"t\"\n    assert get_Char(\"ab\") == \"c\"\ncheck(get_Char)\n", "canonical_solution": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)", "is_passing": true, "given_tests": ["assert get_Char(\"abc\") == \"f\""], "is_solved": true, "implementations": "def get_Char(strr):  \n    if not strr:\n        return \"\"\n    \n    total_sum = sum((ord(char.lower()) - ord('a') + 1) for char in strr if char.isalpha())\n\n    normalized_value = (total_sum - 1) % 26\n    return chr(normalized_value + ord('a'))", "test_feedback": [], "solution": "def get_Char(strr):  \n    if not strr:\n        return \"\"\n    \n    total_sum = sum((ord(char.lower()) - ord('a') + 1) for char in strr if char.isalpha())\n\n    normalized_value = (total_sum - 1) % 26\n    return chr(normalized_value + ord('a'))", "generated_test": ["assert get_Char(\"abc\") == \"f\""], "debug_iter": 9, "token_nums": 579}
{"task_id": "MBPP/84", "prompt": "def sequence(n): \n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    \"\"\"\n", "entry_point": "sequence", "test": "\ndef check(candidate):\n    assert sequence(10) == 6\n    assert sequence(2) == 1\n    assert sequence(3) == 2\ncheck(sequence)\n", "canonical_solution": "def sequence(n): \n    if n == 1 or n == 2: \n        return 1\n    else: \n        return sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "is_passing": true, "given_tests": ["assert sequence(10) == 6"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/85", "prompt": "def surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n", "entry_point": "surfacearea_sphere", "test": "\ndef check(candidate):\n    assert surfacearea_sphere(10)==1256.6370614359173\n    assert surfacearea_sphere(15)==2827.4333882308138\n    assert surfacearea_sphere(20)==5026.548245743669\ncheck(surfacearea_sphere)\n", "canonical_solution": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "is_passing": true, "given_tests": ["assert surfacearea_sphere(10)==1256.6370614359173"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/86", "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n", "entry_point": "centered_hexagonal_number", "test": "\ndef check(candidate):\n    assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(2) == 7\n    assert centered_hexagonal_number(9) == 217\ncheck(centered_hexagonal_number)\n", "canonical_solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "is_passing": true, "given_tests": ["assert centered_hexagonal_number(10) == 271"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/87", "prompt": "def merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    \"\"\"\n", "entry_point": "merge_dictionaries_three", "test": "\ndef check(candidate):\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\ncheck(merge_dictionaries_three)\n", "canonical_solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "is_passing": true, "given_tests": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"], "is_solved": false, "implementations": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into one. If there are overlapping keys,\n    the values from dict3 will overwrite those from dict2, and dict2 will\n    overwrite those from dict1.\n    \n    Parameters:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A new dictionary containing all key-value pairs from dict1, dict2, and dict3.\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n# Example usage:\n# dict1 = {'a': 1, 'b': 2}\n# dict2 = {'b': 3, 'c': 4}\n# dict3 = {'c': 5, 'd': 6}\n# merged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n# print(merged_dict)  # Output: {'a': 1, 'b': 3, 'c': 5, 'd': 6}\n```\n", "test_feedback": [], "solution": "```python\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into one. If there are overlapping keys,\n    the values from dict3 will overwrite those from dict2, and dict2 will\n    overwrite those from dict1.\n    \n    Parameters:\n    dict1 (dict): The first dictionary.\n    dict2 (dict): The second dictionary.\n    dict3 (dict): The third dictionary.\n    \n    Returns:\n    dict: A new dictionary containing all key-value pairs from dict1, dict2, and dict3.\n    \"\"\"\n    return {**dict1, **dict2, **dict3}\n\n# Example usage:\n# dict1 = {'a': 1, 'b': 2}\n# dict2 = {'b': 3, 'c': 4}\n# dict3 = {'c': 5, 'd': 6}\n# merged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n# print(merged_dict)  # Output: {'a': 1, 'b': 3, 'c': 5, 'd': 6}\n```\n", "generated_test": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"], "debug_iter": 1, "token_nums": 544}
{"task_id": "MBPP/88", "prompt": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    \"\"\"\n", "entry_point": "freq_count", "test": "\ndef check(candidate):\n    assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n    assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n    assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \ncheck(freq_count)\n", "canonical_solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "is_passing": true, "given_tests": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) "], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/89", "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n", "entry_point": "closest_num", "test": "\ndef check(candidate):\n    assert closest_num(11) == 10\n    assert closest_num(7) == 6\n    assert closest_num(12) == 11\ncheck(closest_num)\n", "canonical_solution": "def closest_num(N):\n  return (N - 1)", "is_passing": true, "given_tests": ["assert closest_num(11) == 10"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/90", "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n", "entry_point": "len_log", "test": "\ndef check(candidate):\n    assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n    assert len_log([\"a\",\"ab\",\"abc\"]) == 3\n    assert len_log([\"small\",\"big\",\"tall\"]) == 5\ncheck(len_log)\n", "canonical_solution": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max", "is_passing": true, "given_tests": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/91", "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    \"\"\"\n", "entry_point": "find_substring", "test": "\ndef check(candidate):\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n    assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\ncheck(find_substring)\n", "canonical_solution": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "is_passing": true, "given_tests": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/92", "prompt": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n", "entry_point": "is_undulating", "test": "\ndef check(candidate):\n    assert is_undulating(\"1212121\") == True\n    assert is_undulating(\"1991\") == False\n    assert is_undulating(\"121\") == True\ncheck(is_undulating)\n", "canonical_solution": "def is_undulating(n): \n    if (len(n) <= 2): \n        return False\n    for i in range(2, len(n)): \n        if (n[i - 2] != n[i]): \n            return False\n    return True", "is_passing": true, "given_tests": ["assert is_undulating(\"1212121\") == True"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/93", "prompt": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n", "entry_point": "power", "test": "\ndef check(candidate):\n    assert power(3,4) == 81\n    assert power(2,3) == 8\n    assert power(5,5) == 3125\ncheck(power)\n", "canonical_solution": "def power(a,b):\n    if b==0:\n        return 1\n    elif a==0:\n        return 0\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)", "is_passing": true, "given_tests": ["assert power(3,4) == 81"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/94", "prompt": "def index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    \"\"\"\n", "entry_point": "index_minimum", "test": "\ndef check(candidate):\n    assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\ncheck(index_minimum)\n", "canonical_solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "is_passing": true, "given_tests": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/95", "prompt": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    \"\"\"\n", "entry_point": "Find_Min_Length", "test": "\ndef check(candidate):\n    assert Find_Min_Length([[1],[1,2]]) == 1\n    assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\ncheck(Find_Min_Length)\n", "canonical_solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "is_passing": true, "given_tests": ["assert Find_Min_Length([[1],[1,2]]) == 1"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/96", "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n", "entry_point": "divisor", "test": "\ndef check(candidate):\n    assert divisor(15) == 4 \n    assert divisor(12) == 6\n    assert divisor(9) == 3\ncheck(divisor)\n", "canonical_solution": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "is_passing": true, "given_tests": ["assert divisor(15) == 4 "], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/97", "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n", "entry_point": "frequency_lists", "test": "\ndef check(candidate):\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n    assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\ncheck(frequency_lists)\n", "canonical_solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "is_passing": true, "given_tests": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/98", "prompt": "def multiply_num(numbers):  \n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n", "entry_point": "multiply_num", "test": "\ndef check(candidate):\n    assert multiply_num((8, 2, 3, -1, 7))==-67.2\n    assert multiply_num((-10,-20,-30))==-2000.0\n    assert multiply_num((19,15,18))==1710.0\ncheck(multiply_num)\n", "canonical_solution": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "is_passing": true, "given_tests": ["assert multiply_num((8, 2, 3, -1, 7))==-67.2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/99", "prompt": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    \"\"\"\n", "entry_point": "decimal_to_binary", "test": "\ndef check(candidate):\n    assert decimal_to_binary(8) == '1000'\n    assert decimal_to_binary(18) == '10010'\n    assert decimal_to_binary(7) == '111' \ncheck(decimal_to_binary)\n", "canonical_solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "is_passing": true, "given_tests": ["assert decimal_to_binary(8) == '1000'"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/100", "prompt": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    \"\"\"\n", "entry_point": "next_smallest_palindrome", "test": "\ndef check(candidate):\n    assert next_smallest_palindrome(99)==101\n    assert next_smallest_palindrome(1221)==1331\n    assert next_smallest_palindrome(120)==121\ncheck(next_smallest_palindrome)\n", "canonical_solution": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "is_passing": true, "given_tests": ["assert next_smallest_palindrome(99)==101"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/101", "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n", "entry_point": "kth_element", "test": "\ndef check(candidate):\n    assert kth_element([12,3,5,7,19], 5, 2) == 3\n    assert kth_element([17,24,8,23], 4, 3) == 8\n    assert kth_element([16,21,25,36,4], 5, 4) == 36\ncheck(kth_element)\n", "canonical_solution": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]", "is_passing": true, "given_tests": ["assert kth_element([12,3,5,7,19], 5, 2) == 3"], "is_solved": true, "implementations": "```python\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n    # Check if the array is empty or if k is out of bounds\n    if n == 0 or k < 1 or k > n:\n        raise IndexError(\"k is out of bounds\")\n\n    # Convert k to zero-based index\n    zero_based_index = k - 1\n\n    # Return the kth element\n    return arr[zero_based_index]\n\n# Example usage:\n# arr = [10, 20, 30, 40, 50]\n# n = len(arr)\n# k = 3\n# print(kth_element(arr, n, k))  # Output: 30\n```\n", "test_feedback": [], "solution": "```python\ndef kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    \"\"\"\n    # Check if the array is empty or if k is out of bounds\n    if n == 0 or k < 1 or k > n:\n        raise IndexError(\"k is out of bounds\")\n\n    # Convert k to zero-based index\n    zero_based_index = k - 1\n\n    # Return the kth element\n    return arr[zero_based_index]\n\n# Example usage:\n# arr = [10, 20, 30, 40, 50]\n# n = len(arr)\n# k = 3\n# print(kth_element(arr, n, k))  # Output: 30\n```\n", "generated_test": ["assert kth_element([12,3,5,7,19], 5, 2) == 3"], "debug_iter": 1, "token_nums": 603}
{"task_id": "MBPP/102", "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    \"\"\"\n", "entry_point": "snake_to_camel", "test": "\ndef check(candidate):\n    assert snake_to_camel('python_program')=='PythonProgram'\n    assert snake_to_camel('python_language')==('PythonLanguage')\n    assert snake_to_camel('programming_language')==('ProgrammingLanguage')\ncheck(snake_to_camel)\n", "canonical_solution": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "is_passing": true, "given_tests": ["assert snake_to_camel('python_program')=='PythonProgram'"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/103", "prompt": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    \"\"\"\n", "entry_point": "eulerian_num", "test": "\ndef check(candidate):\n    assert eulerian_num(3, 1) == 4\n    assert eulerian_num(4, 1) == 11\n    assert eulerian_num(5, 3) == 26\ncheck(eulerian_num)\n", "canonical_solution": "def eulerian_num(n, m): \n    if (m >= n or n == 0): \n        return 0 \n    if (m == 0): \n        return 1 \n    return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "is_passing": true, "given_tests": ["assert eulerian_num(3, 1) == 4"], "is_solved": true, "implementations": "def eulerian_num(n, m):\n    \n\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    if m == 0 or m == n - 1:\n        return 1\n\n    dp = [[0 for _ in range(n)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = 1\n            elif i > 0:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n\n    return dp[n][m]", "test_feedback": [], "solution": "def eulerian_num(n, m):\n    \n\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1\n    if m == 0 or m == n - 1:\n        return 1\n\n    dp = [[0 for _ in range(n)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(n):\n            if j == 0:\n                dp[i][j] = 1\n            elif i > 0:\n                dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n\n    return dp[n][m]", "generated_test": ["assert eulerian_num(3, 1) == 4"], "debug_iter": 2, "token_nums": 747}
{"task_id": "MBPP/104", "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    \"\"\"\n", "entry_point": "sort_sublists", "test": "\ndef check(candidate):\n    assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\ncheck(sort_sublists)\n", "canonical_solution": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result", "is_passing": true, "given_tests": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/105", "prompt": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n", "entry_point": "count", "test": "\ndef check(candidate):\n    assert count([True,False,True]) == 2\n    assert count([False,False]) == 0\n    assert count([True,True,True]) == 3\ncheck(count)\n", "canonical_solution": "def count(lst):   \n    return sum(lst) ", "is_passing": true, "given_tests": ["assert count([True,False,True]) == 2"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/106", "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    \"\"\"\n", "entry_point": "add_lists", "test": "\ndef check(candidate):\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\ncheck(add_lists)\n", "canonical_solution": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "is_passing": true, "given_tests": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
{"task_id": "MBPP/107", "prompt": "def count_Hexadecimal(L,R) :  \n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    \"\"\"\n", "entry_point": "count_Hexadecimal", "test": "\ndef check(candidate):\n    assert count_Hexadecimal(10,15) == 6\n    assert count_Hexadecimal(2,4) == 0\n    assert count_Hexadecimal(15,16) == 1\ncheck(count_Hexadecimal)\n", "canonical_solution": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ", "is_passing": true, "given_tests": ["assert count_Hexadecimal(10,15) == 6"], "is_solved": false, "implementations": "```python\ndef count_Hexadecimal(L, R):\n    \"\"\"\n    Count the number of integers between L and R (inclusive) that can be represented as hexadecimal numbers.\n    Since every integer can be represented as a hexadecimal number, this function simply counts the integers\n    in the range [L, R].\n\n    Parameters:\n    L (int): The lower bound of the range.\n    R (int): The upper bound of the range.\n\n    Returns:\n    int: The count of integers in the range [L, R].\n    \"\"\"\n    if L > R:\n        return 0\n    return R - L + 1\n\n# Example usage:\n# print(count_Hexadecimal(10, 15))  # Output: 6\n```\n", "test_feedback": [], "solution": "```python\ndef count_Hexadecimal(L, R):\n    \"\"\"\n    Count the number of integers between L and R (inclusive) that can be represented as hexadecimal numbers.\n    Since every integer can be represented as a hexadecimal number, this function simply counts the integers\n    in the range [L, R].\n\n    Parameters:\n    L (int): The lower bound of the range.\n    R (int): The upper bound of the range.\n\n    Returns:\n    int: The count of integers in the range [L, R].\n    \"\"\"\n    if L > R:\n        return 0\n    return R - L + 1\n\n# Example usage:\n# print(count_Hexadecimal(10, 15))  # Output: 6\n```\n", "generated_test": ["assert count_Hexadecimal(10,15) == 6"], "debug_iter": 1, "token_nums": 580}
{"task_id": "MBPP/108", "prompt": "def merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    \"\"\"\n", "entry_point": "merge_sorted_list", "test": "\ndef check(candidate):\n    assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\ncheck(merge_sorted_list)\n", "canonical_solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "is_passing": true, "given_tests": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"], "is_solved": true, "implementations": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \n\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n\n    return list(heapq.merge(num1, num2, num3))", "test_feedback": [], "solution": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \n\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n\n    return list(heapq.merge(num1, num2, num3))", "generated_test": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"], "debug_iter": 2, "token_nums": 649}
{"task_id": "MBPP/109", "prompt": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    \"\"\"\n", "entry_point": "odd_Equivalent", "test": "\ndef check(candidate):\n    assert odd_Equivalent(\"011001\",6) == 3\n    assert odd_Equivalent(\"11011\",5) == 4\n    assert odd_Equivalent(\"1010\",4) == 2\ncheck(odd_Equivalent)\n", "canonical_solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ", "is_passing": true, "given_tests": ["assert odd_Equivalent(\"011001\",6) == 3"], "is_solved": true, "implementations": "", "test_feedback": "", "solution": "", "generated_test": "", "debug_iter": 0, "token_nums": 1}
